{"version":3,"sources":["igicon.png","mangrupchips-durian.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","src","durian","alt","Title","Description","IgContainer","igIcon","IgLink","styled","div","h1","h2","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,0ECA3CD,EAAOC,QAAU,IAA0B,kC,gyBCiC5BC,MA1Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGC,KAAK,0CACN,yBAAKC,IAAKC,IAAQH,UAAU,WAAWI,IAAI,UAE7C,kBAACC,EAAD,KACE,uBAAGJ,KAAK,0CAAR,gBACA,6BACA,iDAEF,kBAACK,EAAD,+OACA,kBAACC,EAAD,KACE,uBAAGN,KAAK,0CACN,yBAAKC,IAAKM,IAAQR,UAAU,UAAUI,IAAI,aAE5C,kBAACK,EAAD,CAAQR,KAAK,0CAAb,wBAWJM,EAAcG,IAAOC,IAAV,KAKXN,EAAQK,IAAOE,GAAV,KAcLN,EAAcI,IAAOG,GAAV,KAIXJ,EAASC,IAAOI,EAAV,KC9CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ba3e9ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/igicon.97254915.png\";","module.exports = __webpack_public_path__ + \"static/media/mangrupchips-durian.6d4be742.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport igIcon from \"./igicon.png\";\nimport durian from \"./mangrupchips-durian.png\";\nimport styled, { css } from \"styled-components\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <a href='https://www.instagram.com/mangrupchips'>\n          <img src={durian} className='App-logo' alt='logo' />\n        </a>\n        <Title>\n          <a href='https://www.instagram.com/mangrupchips'>Mangrupchips</a>\n          <br />\n          <span>Coming Soon!! </span>\n        </Title>\n        <Description>แล้วพบกับเว็บไซต์เต็มรูปแบบเร็ว ๆ นี้จ้า</Description>\n        <IgContainer>\n          <a href='https://www.instagram.com/mangrupchips'>\n            <img src={igIcon} className='ig-logo' alt='ig-logo' />\n          </a>\n          <IgLink href='https://www.instagram.com/mangrupchips'>\n            IG: mangrupchips\n          </IgLink>\n        </IgContainer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nconst IgContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\n  a {\n    font-size: 4.5rem;\n    color: #f0a500;\n    text-decoration: none;\n    :hover {\n      text-decoration: underline;\n    }\n  }\n  span {\n    color: #f4f4f4;\n  }\n`;\n\nconst Description = styled.h2`\n  color: #cf7500;\n`;\n\nconst IgLink = styled.a`\n  color: #f4f4f4;\n  margin: auto 0;\n  text-decoration: none;\n  :hover {\n    text-decoration: underline;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}